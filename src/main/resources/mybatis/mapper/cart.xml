<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.mycompany.webapp.dao.CartDao">

	<resultMap type="productCommon" id="productCommonMap">
		<id property="pcommonid" column="pcommonid"/>
		<result property="pname" column="pname"/>
		<result property="pnote" column="pnote"/>
		<result property="bno" column="bno"/>
	</resultMap>
	
	<resultMap type="productColor" id="productColorMap">
		<id property="pcolorid" column="pcolorid"/>
		<result property="img1" column="img1"/>
		<result property="img2" column="img2"/>
		<result property="img3" column="img3"/>
		<result property="colorImg" column="color_img"/>
		<result property="pcommonid" column="pcommonid"/>
		<result property="ccode" column="ccode"/>
		<result property="pprice" column="pprice"/>
	</resultMap>
	
	<resultMap type="productStock" id="productStockMap">
		<id property="pstockid" column="pstockid"/>
		<result property="pcolorid" column="pcolorid"/>
		<result property="scode" column="scode"/>
		<result property="stock" column="stock"/>
	</resultMap>

	<resultMap type="brand" id="brandMap">
		<id property="bno" column="bno"/>
		<result property="name" column="bname"/>
	</resultMap>
	
	<resultMap type="cart" id="cartMap">
		<result property="mid" column="mid"/>
		<result property="quantity" column="quantity"/>
		<result property="pstockid" column="pstockid"/>
	</resultMap>
	
	<resultMap type="category" id="categoryMap">
		<id property="catno" column="catno"/>
		<result property="d1name" column="d1name"/>
		<result property="d2name" column="d2name"/>
		<result property="d3name" column="d3name"/>
	</resultMap>
	
	<resultMap type="com.mycompany.webapp.dto.CartList" id="cartListMap">
		<collection property="productCommon" resultMap="productCommonMap"/>
		<collection property="productColor" resultMap="productColorMap"/>
		<collection property="productStock" resultMap="productStockMap"/>
		<collection property="brand" resultMap="brandMap"/>
		<collection property="cart" resultMap="cartMap"></collection>
	</resultMap>
	
	<!-- 카트 리스트 출력 옵션 부분 테스트 중 -->
	<resultMap type="java.util.HashMap" id="cartListTestMap">
		<id property="pstockid" column="pstockid"/>
		<result property="pcommonid" column="pcommonid"/>
		<result property="pcolorid" column="pcolorid"/>
		<result property="quantity" column="quantity"/>
		<result property="bname" column="bname"/>
		<result property="pname" column="pname"/>
		<result property="img1" column="img1"/>
		<result property="img2" column="img2"/>
		<result property="img3" column="img3"/>
<!-- 		<result property="colorImg" column="color_img"/> -->
		<result property="occode" column="occode"/>
		<result property="oscode" column="oscode"/>
		<result property="pprice" column="pprice"/>
		<result property="stock" column="stock"/>
		<collection property="optionList" javaType="java.util.ArrayList" resultMap="optionMap"/>
	</resultMap>
	<resultMap type="java.util.HashMap" id="optionMap">
		<id property="ccode" column="ccode"/>
		<result property="colorImg" column="color_img"/>
		<collection property="scodeList" javaType="java.util.ArrayList" resultMap="scodeMap"/>
	</resultMap>
	<resultMap type="java.util.HashMap" id="scodeMap">
		<result property="scode" column="scode"/>
	</resultMap>
	<!-- 카트 안의 리스트 출력하기 -->
<!-- 	<select id="selectList" parameterType="String" resultMap="cartListMap">
		select product_common.pcommonid, product_color.pcolorid, product_stock.pstockid, quantity, bname, pname,
				scode, ccode, img1, img2, img3, color_img, pprice, stock
			from cart, product_common, product_color, brand, product_stock
			where cart.mid = #{mid}
	        and cart.pstockid = product_stock.pstockid
	        and product_stock.pcolorid = product_color.pcolorid
	        and product_common.pcommonid = product_color.pcommonid
	        and product_common.bno = brand.bno
	</select> -->
	
	<!-- 카트 리스트 출력 옵션 부분 테스트 중 -->
	<select id="selectList" parameterType="String" resultMap="cartListTestMap">
        select * 
        from (
            select product_common.pcommonid, product_color.pcolorid, product_stock.pstockid, quantity, bname, pname,
           img1, img2, img3, pprice, stock, product_color.ccode as occode, product_stock.scode as oscode
			from cart, product_common, product_color, brand, product_stock
			where cart.mid = #{mid}
	        and cart.pstockid = product_stock.pstockid
	        and product_stock.pcolorid = product_color.pcolorid
	        and product_common.pcommonid = product_color.pcommonid
	        and product_common.bno = brand.bno ) a 
            inner join (
                    select product_common.pcommonid, color_img, ccode, sizes.scode
                    from product_common, product_color, product_stock, sizes
                    where product_common.pcommonid in (
                        select regexp_substr(cart.pstockid, '[^_]+', 1, 1)
                        from cart
                        where cart.mid = #{mid}
                        )
                    and product_stock.pcolorid = product_color.pcolorid
                    and product_color.pcommonid = product_common.pcommonid
                    and sizes.scode = product_stock.scode
                    order by sno) b using (pcommonid)
	</select>
	
	<!-- 상품의 색상 리스트 출력하기 -->
	<select id="selectColorsByPcommonId" parameterType="String" resultType="com.mycompany.webapp.dto.Color">
		select distinct color_code, color_img
			from product_common, product_color, product_stock
			where product_common.id = #{pcommonId, jdbcType=VARCHAR}
			and product_color.product_common_id = product_common.id
			and product_stock.product_color_id = product_color.id
	</select>
	<!-- 상품의 사이즈 리스트 출력하기 -->
<!-- 	<select id="selectSizesByPcommonId" parameterType="String" resultType="com.mycompany.webapp.dto.Size">
		select size_code 
		from (
			select distinct sizes.no, size_code
				from product_common, SIZES, product_color, product_stock
				where product_common.id = #{pcommonId}
				and product_color.product_common_id = product_common.id
				and product_stock.product_color_id = product_color.id
				and sizes.code = product_stock.size_code
				order by sizes.no
		)
	</select> -->
	
	<!-- 상품의 사이즈 리스트 출력하기 -->
	<!-- * 수정 ! 상품의 사이즈 리스트는 pcolorId로 가져와야햔다. -->
	<select id="selectSizesByPcolorId" parameterType="String" resultType="com.mycompany.webapp.dto.Size">
		select size_code
			from (select distinct sizes.no, size_code
			from product_color, product_stock, SIZES
			where product_color.id = #{pcolorId}
			and product_color.id = product_stock.product_color_id
			and sizes.code = product_stock.size_code
			order by sizes.no)
	</select>
	
	<!-- 카트 수량 업데이트하기 -->
	<update id="updateCountByQuantity" parameterType="map">
		UPDATE cart
			SET quantity = #{quantity}
			where member_id = #{mid}
			and product_stock_id = #{pstockId}
	</update>
	
	<!-- 카트 옵션 업데이트하기 -->
	<update id="updatePstockId" parameterType="map">
		update cart
			set product_stock_id = #{newPstockId}
			where member_id = #{mid}
			and product_stock_id = #{oldPstockId}
	</update>
	
	<!-- cart update -->
<!-- 	<update id="update" parameterType="com.mycompany.webapp.dto.CartUpdate">
		<if test=""></if>
		UPDATE CART SET 
		MEMBER_ID = #{memberId} AND PRODUCT_STOCK_ID = #{newPstockId})
		WHEN MATCHED THEN
		UPDATE SET QUANTITY = QUANTITY + #{quantity}
		WHEN NOT MATCHED THEN
		INSERT VALUES(#{memberId}, #{newPstockId}, #{quantity})
		DELETE WHERE member_id = #{memberId}
			AND product_stock_id = #{oldPstockId}
		]]>
	</update> -->
	
	<!-- pcolorId로 카테고리 뽑아오기-->
	<select id="selectCategoryByPcolorId" parameterType="String" resultMap="categoryMap">
	select * from (
		select distinct no, depth1_name, depth2_name, depth3_name
			from product_common, product_color, product_category, category
            where product_color.id = #{pcolorId}
	        and product_color.product_common_id = product_common.id
            and product_category.product_common_id = product_common.id
            and product_category.category_no = category.no
            order by length(depth2_name))
            where rownum=1
	</select>
	
	<!-- cart insert -->
	<insert id="insertCart" parameterType="cart">
		<!-- INSERT INTO CART(MEMBER_ID, PRODUCT_STOCK_ID, QUANTITY)
		VALUES (#{memberId}, #{productStockId}, #{quantity}) -->
		MERGE INTO CART
		USING DUAL
		ON (CART.mid = #{mid} AND CART.pstockid = #{pstockid})
		WHEN MATCHED THEN
		UPDATE SET CART.QUANTITY = CART.QUANTITY + #{quantity}
		WHEN NOT MATCHED THEN
		INSERT VALUES(#{mid}, #{pstockid}, #{quantity})
	</insert>
	
	<!-- cart delete -->
	<delete id="deleteByMidAndPstockid" parameterType="cart">
	delete from cart 
	where mid = #{mid} 
	and pstockid = #{pstockid}
	</delete>
	
	<select id="selectBeforeUpdate" parameterType="com.mycompany.webapp.dto.CartUpdate" resultType="cart">
	select * from cart
	where member_id = #{memberId} 
	and product_stock_id = #{newPstockId}
	</select>
	
	<update id="update" parameterType="com.mycompany.webapp.dto.CartUpdate">
	update cart
	set product_stock_id = #{newPstockId}
	where member_id = #{memberId}
	and product_stock_id = #{oldPstockId}
	</update>
	
	<delete id="deleteToUpdate" parameterType="com.mycompany.webapp.dto.CartUpdate">
	delete from cart
	where member_id = #{memberId}
	and product_stock_id = #{oldPstockId}
	</delete>
	
	<update id="updateQuantity" parameterType="com.mycompany.webapp.dto.CartUpdate">
	update cart 
	set quantity = #{oldQuantity} + #{newQuantity}
	where member_id = #{memberId}
	and product_stock_id = #{newPstockId}
	</update>
</mapper>